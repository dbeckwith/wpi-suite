/*******************************************************************************
 * Copyright (c) 2013 -- WPI Suite
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * TODO: Contributors' names
 ******************************************************************************/
package edu.wpi.cs.wpisuitetng.modules.planningpoker.view.main;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import edu.wpi.cs.wpisuitetng.janeway.config.ConfigManager;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.GameStatusObserver;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.GetGamesController;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.UpdateGamesController;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.Estimate;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.GameListModel;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.GameModel;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.GameRequirementModel;

import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.GroupLayout;
import javax.swing.JTextField;
import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;

/**
 * 
 * @author Sam Carlberg <slcarlberg@wpi.edu>
 */
public class CompletedRequirementPanel extends javax.swing.JPanel {
    
    /**
     * 
     */
    private static final long serialVersionUID = -7702704328142908459L;
    
    private DefaultTableModel tableModel;
    
    private GameRequirementModel req;
    private GameModel parent;
    
    /**
     * Creates new form DetailPanel
     */
    public CompletedRequirementPanel() {
        // setup tablemodel (using autogenerted netbeans code)
        initComponents();
    }
    
    public void setRequirement(GameModel parent_game, GameRequirementModel req) {
        this.req = req;
        parent = parent_game;
        
        
        displayFinalEstimateFields(false);
        
        
        if (ConfigManager.getConfig().getUserName()
                .equals(parent_game.getOwner())) {
            displayFinalEstimateFields(true);
        }
        
        
        meanValueLabel.setText(String.format("%1.1f", req.getEstimateMean()));
        medianValueLabel
                .setText(String.format("%1.1f", req.getEstimateMedian()));
        
        tableModel = new javax.swing.table.DefaultTableModel() {
            
            /**
             * 
             */
            private static final long serialVersionUID = 766575328559324615L;
            
            /*
             * (non-Javadoc)
             * 
             * @see javax.swing.table.DefaultTableModel#isCellEditable(int, int)
             */
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            
        };
        
        tableModel.addColumn("User");
        tableModel.addColumn("Estimate");
        for (Estimate e : req.getEstimates()) {
            String row[] = new String[2];
            row[0] = e.getName() == null ? "???" : e.getName();
            row[1] = String.format("%.1f", e.getEstimate());
            tableModel.addRow(row);
        }
        voteResultTable.setModel(tableModel);
        
    }
    
    private void displayFinalEstimateFields(boolean b) {
        lblFinalEstimate.setVisible(b);
        finalEstimateField.setVisible(b);
        lblNonnegativeIntegersOnly.setVisible(b);
        saveFinalEstimateButton.setVisible(b);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        
        jSeparator1 = new javax.swing.JSeparator();
        meanLabel = new javax.swing.JLabel();
        medianLabel = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        voteResultTable = new javax.swing.JTable();
        meanValueLabel = new javax.swing.JLabel();
        medianValueLabel = new javax.swing.JLabel();
        
        meanLabel.setText("Mean:");
        
        medianLabel.setText("Median:");
        
        tableScrollPane.setBackground(new java.awt.Color(153, 0, 102));
        
        voteResultTable.setModel(new DefaultTableModel(new Object[][] { { null,
                null }, }, new String[] { "User", "Estimate" }) {
            /**
             * 
             */
            private static final long serialVersionUID = -5144539907705808611L;
            boolean[] columnEditables = new boolean[] { false, false };
            
            @Override
            public boolean isCellEditable(int row, int column) {
                return columnEditables[column];
            }
        });
        voteResultTable.getColumnModel().getColumn(0).setPreferredWidth(253);
        voteResultTable.getColumnModel().getColumn(1).setResizable(false);
        voteResultTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        tableScrollPane.setViewportView(voteResultTable);
        
        meanValueLabel.setText("XYZ");
        
        medianValueLabel.setText("ABC");
        
        lblFinalEstimate = new JLabel("Final Estimate:");
        
        finalEstimateField = new JTextField();
        finalEstimateField.setColumns(10);
        saveFinalEstimateButton = new JButton("Save");
        saveFinalEstimateButton.setEnabled(false);
        
        finalEstimateField.getDocument().addDocumentListener(
                new DocumentListener() {
                    
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        validate();
                        
                    }
                    
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        validate();
                        
                    }
                    
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        validate();
                        
                    }
                    
                    private void validate() {
                        try {
                            final int finalEstimate = Integer
                                    .parseInt(finalEstimateField.getText());
                            if (finalEstimate < 0) {
                                //set error label
                                lblNonnegativeIntegersOnly.setVisible(true);
                                saveFinalEstimateButton.setEnabled(false);
                            }
                            else {
                                lblNonnegativeIntegersOnly.setVisible(false);
                                saveFinalEstimateButton.setEnabled(true);
                            }
                        }
                        catch (NumberFormatException e) {
                            //set error label
                            lblNonnegativeIntegersOnly.setVisible(true);
                            saveFinalEstimateButton.setEnabled(false);
                        }
                    }
                    
                });
        
        
        saveFinalEstimateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                lblNonnegativeIntegersOnly.setVisible(false);
                req.setFinalEstimate(Integer.parseInt(finalEstimateField
                        .getText()));
                UpdateGamesController.getInstance().updateGame(parent);
                final ArrayList<GameStatusObserver> gsos = parent
                        .getStatusObservers();
                for (GameStatusObserver g : gsos) {
                    g.statusChanged(parent);
                }
            }
        });
        
        lblNonnegativeIntegersOnly = new JLabel("* Non-negative Integers Only!");
        lblNonnegativeIntegersOnly.setVisible(false);
        lblNonnegativeIntegersOnly.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblNonnegativeIntegersOnly.setForeground(Color.RED);
        
        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        layout.setHorizontalGroup(layout
                .createParallelGroup(Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(
                                        layout.createParallelGroup(
                                                Alignment.LEADING)
                                                .addGroup(
                                                        layout.createSequentialGroup()
                                                                .addGap(16)
                                                                .addGroup(
                                                                        layout.createParallelGroup(
                                                                                Alignment.TRAILING)
                                                                                .addComponent(
                                                                                        meanLabel)
                                                                                .addComponent(
                                                                                        medianLabel))
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED)
                                                                .addGroup(
                                                                        layout.createParallelGroup(
                                                                                Alignment.LEADING,
                                                                                false)
                                                                                .addComponent(
                                                                                        medianValueLabel,
                                                                                        GroupLayout.DEFAULT_SIZE,
                                                                                        30,
                                                                                        Short.MAX_VALUE)
                                                                                .addComponent(
                                                                                        meanValueLabel,
                                                                                        GroupLayout.DEFAULT_SIZE,
                                                                                        GroupLayout.DEFAULT_SIZE,
                                                                                        Short.MAX_VALUE))
                                                                .addGap(74)
                                                                .addComponent(
                                                                        lblFinalEstimate)
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED)
                                                                .addComponent(
                                                                        finalEstimateField,
                                                                        GroupLayout.PREFERRED_SIZE,
                                                                        106,
                                                                        GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED)
                                                                .addComponent(
                                                                        saveFinalEstimateButton)
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED)
                                                                .addComponent(
                                                                        lblNonnegativeIntegersOnly,
                                                                        GroupLayout.PREFERRED_SIZE,
                                                                        77,
                                                                        Short.MAX_VALUE))
                                                .addComponent(
                                                        jSeparator1,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addComponent(
                                                        tableScrollPane,
                                                        GroupLayout.DEFAULT_SIZE,
                                                        478, Short.MAX_VALUE))
                                .addContainerGap()));
        layout.setVerticalGroup(layout
                .createParallelGroup(Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tableScrollPane,
                                        GroupLayout.DEFAULT_SIZE, 213,
                                        Short.MAX_VALUE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jSeparator1,
                                        GroupLayout.PREFERRED_SIZE, 10,
                                        GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(
                                        layout.createParallelGroup(
                                                Alignment.BASELINE)
                                                .addComponent(meanLabel)
                                                .addComponent(meanValueLabel)
                                                .addComponent(lblFinalEstimate)
                                                .addComponent(
                                                        finalEstimateField,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addComponent(
                                                        saveFinalEstimateButton)
                                                .addComponent(
                                                        lblNonnegativeIntegersOnly,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        9,
                                                        GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(
                                        layout.createParallelGroup(
                                                Alignment.BASELINE)
                                                .addComponent(medianLabel)
                                                .addComponent(medianValueLabel))
                                .addGap(13)));
        setLayout(layout);
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel meanLabel;
    private javax.swing.JLabel meanValueLabel;
    private javax.swing.JLabel medianLabel;
    private javax.swing.JLabel medianValueLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTable voteResultTable;
    private JLabel lblFinalEstimate;
    private JTextField finalEstimateField;
    private JLabel lblNonnegativeIntegersOnly;
    private JButton saveFinalEstimateButton;
}
