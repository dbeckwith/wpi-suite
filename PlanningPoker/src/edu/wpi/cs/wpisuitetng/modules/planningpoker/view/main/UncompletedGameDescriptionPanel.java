/*******************************************************************************
 * Copyright (c) 2013 -- WPI Suite
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
package edu.wpi.cs.wpisuitetng.modules.planningpoker.view.main;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle.ComponentPlacement;

import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.GameModel;

/**
 * The requirements panel of the planning poker GUI
 * 
 * @author Team 9
 * @version 1.0
 */
public class UncompletedGameDescriptionPanel extends javax.swing.JPanel {
    
    private static final SimpleDateFormat date_format = new SimpleDateFormat(
            "MM/dd/yyyy hh:mm a");
    
    private static final long serialVersionUID = 7579915917240962935L;
    
    /**
     * Creates new form NewJPanel
     */
    public UncompletedGameDescriptionPanel() {
        setBackground(Color.WHITE);
        initComponents();
    }
    
    /**
     * Sets the game for the UncompletedGameDescriptionPanel
     * 
     * @param game
     *        the game to be set
     */
    public void setGame(GameModel game) {
        setGameName(game.getName());
        setDescriptionText(game.getDescription());
        setEndDate(game.getEndTime());
        setDeckName(game.getDeck().toString());
        // DefaultListModel<String> listModel = new DefaultListModel<>();
        // listModel.addElement(element);
        // getParticipantsList().setModel(listModel);
    }
    
    /**
     * Sets the end date for this uncompleted game
     * 
     * @param date
     *        the end date to be set
     */
    protected void setEndDate(Date date) {
        if (date == null) {
            setNoDeadline(true);
        }
        else {
            setNoDeadline(false);
            setGameDeadlineText(UncompletedGameDescriptionPanel.date_format
                    .format(date));
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        
        nameLabel = new javax.swing.JLabel();
        nameLabel.setText("Name:");
        
        gameName = new JLabel("");
        
        final JLabel lblProgress = new JLabel("Progress:");
        
        progressBar = new JProgressBar();
        
        progressLabel = new JLabel("0/0");
        
        final JScrollPane scrollPane_1 = new JScrollPane();
        
        lblDeadline = new JLabel("Deadline:");
        
        gameDeadline = new JLabel("");
        
        lblDeck = new JLabel("Deck:");
        
        deckName = new JLabel("");
        
        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        layout.setHorizontalGroup(layout
                .createParallelGroup(Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(
                                        layout.createParallelGroup(
                                                Alignment.LEADING)
                                                .addComponent(
                                                        scrollPane_1,
                                                        GroupLayout.DEFAULT_SIZE,
                                                        488, Short.MAX_VALUE)
                                                .addGroup(
                                                        layout.createSequentialGroup()
                                                                .addGroup(
                                                                        layout.createParallelGroup(
                                                                                Alignment.LEADING)
                                                                                .addGroup(
                                                                                        layout.createSequentialGroup()
                                                                                                .addComponent(
                                                                                                        nameLabel)
                                                                                                .addGroup(
                                                                                                        layout.createParallelGroup(
                                                                                                                Alignment.LEADING)
                                                                                                                .addGroup(
                                                                                                                        layout.createSequentialGroup()
                                                                                                                                .addPreferredGap(
                                                                                                                                        ComponentPlacement.RELATED)
                                                                                                                                .addComponent(
                                                                                                                                        gameName))
                                                                                                                .addGroup(
                                                                                                                        layout.createSequentialGroup()
                                                                                                                                .addGap(154)
                                                                                                                                .addComponent(
                                                                                                                                        lblDeadline)
                                                                                                                                .addPreferredGap(
                                                                                                                                        ComponentPlacement.RELATED)
                                                                                                                                .addComponent(
                                                                                                                                        gameDeadline))))
                                                                                .addGroup(
                                                                                        layout.createSequentialGroup()
                                                                                                .addComponent(
                                                                                                        lblDeck)
                                                                                                .addPreferredGap(
                                                                                                        ComponentPlacement.RELATED)
                                                                                                .addComponent(
                                                                                                        deckName)))
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED,
                                                                        36,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(
                                                                        lblProgress)
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED)
                                                                .addComponent(
                                                                        progressBar,
                                                                        GroupLayout.PREFERRED_SIZE,
                                                                        GroupLayout.DEFAULT_SIZE,
                                                                        GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        ComponentPlacement.RELATED)
                                                                .addComponent(
                                                                        progressLabel)))
                                .addContainerGap()));
        layout.setVerticalGroup(layout
                .createParallelGroup(Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(
                                        layout.createParallelGroup(
                                                Alignment.BASELINE)
                                                .addComponent(nameLabel)
                                                .addComponent(gameName)
                                                .addComponent(
                                                        lblDeadline,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        14,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addComponent(gameDeadline))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(scrollPane_1,
                                        GroupLayout.PREFERRED_SIZE, 32,
                                        GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(
                                        layout.createParallelGroup(
                                                Alignment.LEADING)
                                                .addComponent(progressLabel)
                                                .addComponent(lblProgress)
                                                .addComponent(
                                                        progressBar,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addGroup(
                                                        layout.createParallelGroup(
                                                                Alignment.BASELINE)
                                                                .addComponent(
                                                                        lblDeck)
                                                                .addComponent(
                                                                        deckName)))
                                .addContainerGap(186, Short.MAX_VALUE)));
        
        descriptionText = new JTextPane();
        descriptionText.setEditable(false);
        scrollPane_1.setViewportView(descriptionText);
        setLayout(layout);
    }// </editor-fold>//GEN-END:initComponents
    
    private javax.swing.JLabel nameLabel;
    private JLabel gameName;
    private JTextPane descriptionText;
    private JProgressBar progressBar;
    private JLabel progressLabel;
    private JLabel gameDeadline;
    private JLabel lblDeadline;
    private JLabel lblDeck;
    private JLabel deckName;
    
    /**
     * get the name of the game
     * 
     * @return the name of the game
     */
    protected String getGameName() {
        return gameName.getText();
    }
    
    /**
     * Sets the game name for this uncompleted game
     * 
     * @param text
     *        the name to be set for the game
     */
    protected void setGameName(String text) {
        gameName.setText(text);
    }
    
    /**
     * gets the description of the game
     * 
     * @return The description text for this uncompleted game
     */
    protected String getDescriptionText() {
        return descriptionText.getText();
    }
    
    /**
     * Sets the description text for this uncompleted game
     * 
     * @param text
     *        the description to be set
     */
    protected void setDescriptionText(String text) {
        descriptionText.setText(text);
    }
    
    /**
     * get the progress bar value
     * 
     * @return the progress bar value
     */
    protected int getProgressBarValue() {
        return progressBar.getValue();
    }
    
    /**
     * Sets the progress bar value
     * 
     * @param value
     *        progress bar value
     */
    protected void setProgressBarValue(int value) {
        progressBar.setValue(value);
    }
    
    /**
     * get the progress label text
     * 
     * @return The progress bar label text
     */
    protected String getProgressLabelText() {
        return progressLabel.getText();
    }
    
    /**
     * Sets the progress bar label text
     * 
     * @param text
     */
    protected void setProgressLabelText(String text) {
        progressLabel.setText(text);
    }
    
    /**
     * get the game deadline text
     * 
     * @return The game deadline text
     */
    protected String getGameDeadlineText() {
        return gameDeadline.getText();
    }
    
    /**
     * Sets the game deadline text
     * 
     * @param text
     *        the game deadline text to be set
     */
    protected void setGameDeadlineText(String text) {
        gameDeadline.setText(text);
    }
    
    /**
     * sets deadline field visible/invisible depending on if game has a deadline
     * 
     * @param status
     *        true if no deadline, false if there is a deadline
     */
    protected void setNoDeadline(boolean status) {
        if (status) {
            lblDeadline.setVisible(false);
            gameDeadline.setVisible(false);
        }
        else {
            lblDeadline.setVisible(true);
            gameDeadline.setVisible(true);
        }
    }
    
    /**
     * get the name of the deck
     * 
     * @return the name of the deck for this game
     */
    protected String getDeckName() {
        return deckName.getText();
    }
    
    /**
     * Sets the name of the deck for this game
     * 
     * @param text
     *        the name of the deck to be set
     */
    protected void setDeckName(String text) {
        deckName.setText(text);
    }
}
