/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.wpi.cs.wpisuitetng.modules.planningpoker.view.main;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.GetRequirementsController;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.SimpleListObserver;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.GameRequirementModel;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.RequirementsListModel;
import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Color;
import javax.swing.JScrollPane;
import javax.swing.JLabel;

/**
 * 
 * @author Lukas
 */
public class NewGameRequirementsPanel extends javax.swing.JPanel {

	/**
     * 
     */
	private static final long serialVersionUID = -4252474071295177531L;

	private SimpleListObserver requirementsListObserver;
	
	/**
	 * Creates new form GameRequirements
	 */
	public NewGameRequirementsPanel() {
	    setBackground(Color.WHITE);
		initComponents();
		requirementsTableScrollPane.getViewport().setBackground(Color.WHITE);
		requirementsTable.getModel().addTableModelListener(
				new TableModelListener() {

					@Override
					public void tableChanged(TableModelEvent e) {
						validateForm();
						checkAllSelected();
						parent.check();
					}
				});
		
		GetRequirementsController.getInstance().retrieveRequirements();
		requirementsListObserver = new SimpleListObserver() {
            
            @Override
            public void listUpdated() {
                for (GameRequirementModel req : RequirementsListModel.getInstance().getAll()) {
                    addRequirement(req);
                }
            }
        };
		RequirementsListModel.getInstance().addListListener(requirementsListObserver);
	}
	
	public SimpleListObserver getRequirementsListObserver() {
	    return requirementsListObserver;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		requirementsTableScrollPane = new javax.swing.JScrollPane();
		requirementsTable = new javax.swing.JTable();
		addButton = new javax.swing.JButton();
		countError = new javax.swing.JLabel();

		requirementsTable.setModel(new DefaultTableModel(
		    new Object[][] {
		    },
		    new String[] {
		        "Include?", "Name", "Description", "Type"
		    }
		) {
		    Class[] columnTypes = new Class[] {
		        Boolean.class, Object.class, Object.class, Object.class
		    };
		    public Class getColumnClass(int columnIndex) {
		        return columnTypes[columnIndex];
		    }
		});
		requirementsTable
				.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		requirementsTable.getTableHeader().setReorderingAllowed(false);

		requirementsTableScrollPane.setViewportView(requirementsTable);
		if (requirementsTable.getColumnModel().getColumnCount() > 0) {
			requirementsTable.getColumnModel().getColumn(0).setMinWidth(60);
			requirementsTable.getColumnModel().getColumn(0).setMaxWidth(60);
		}

		addButton.setText("Create Requirement");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				parent.showPanel("newreqpanel");
			}
		});

		countError.setForeground(new java.awt.Color(255, 0, 0));
		countError.setText("At least one requirement is needed!");
		
		btnSelectAll = new JButton("Select All");
		btnSelectAll.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        if (allSelected) {
		            setAllSelected(false);
		            btnSelectAll.setText("Select All");
		        }
		        else {
		            setAllSelected(true);
		            btnSelectAll.setText("Deselect All");
		        }
		    }
		});
		
		JLabel lblGameRequirements = new JLabel("Game Requirements:");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(
		    layout.createParallelGroup(Alignment.LEADING)
		        .addGroup(layout.createSequentialGroup()
		            .addContainerGap()
		            .addComponent(btnSelectAll)
		            .addPreferredGap(ComponentPlacement.RELATED)
		            .addComponent(addButton)
		            .addGap(18)
		            .addComponent(countError)
		            .addContainerGap(40, Short.MAX_VALUE))
		        .addGroup(layout.createSequentialGroup()
		            .addContainerGap()
		            .addComponent(lblGameRequirements)
		            .addContainerGap(340, Short.MAX_VALUE))
		        .addComponent(requirementsTableScrollPane, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
		    layout.createParallelGroup(Alignment.LEADING)
		        .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
		            .addContainerGap()
		            .addComponent(lblGameRequirements)
		            .addPreferredGap(ComponentPlacement.RELATED)
		            .addComponent(requirementsTableScrollPane, GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
		            .addGap(11)
		            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
		                .addComponent(addButton)
		                .addComponent(countError)
		                .addComponent(btnSelectAll))
		            .addContainerGap())
		);
		setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private boolean allSelected = false;
	private void setAllSelected(boolean select) {
	    allSelected = select;
		DefaultTableModel model = (DefaultTableModel) requirementsTable
				.getModel();
		for (int i = 0; i < model.getRowCount(); i++) {
			model.setValueAt(select, i, 0);
		}
	}
	
	private void checkAllSelected() {
	    DefaultTableModel model = (DefaultTableModel) requirementsTable
                .getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (!(Boolean) model.getValueAt(i, 0)) {
                allSelected = false;
                btnSelectAll.setText("Select All");
                return;
            }
        }
        allSelected = true;
        btnSelectAll.setText("Deselect All");
	}

	public void addRequirement(GameRequirementModel r) {
		System.out.println("added requirement " + r.toString());
		DefaultTableModel model = (DefaultTableModel) requirementsTable
				.getModel();
		model.addRow(new Object[] { false, r, r.getDescription().toString(),
				r.getType().toString() });
		requirementsTable.setModel(model);
		validateForm();
		parent.check();
	}

	public ArrayList<GameRequirementModel> getRequirementsFromTable() {
		DefaultTableModel model = (DefaultTableModel) requirementsTable
				.getModel();
		ArrayList<GameRequirementModel> requirements = new ArrayList<GameRequirementModel>();
		for (int i = 0; i < model.getRowCount(); i++) {
			if (!(Boolean) model.getValueAt(i, 0)) {
				continue;
			}
			requirements.add((GameRequirementModel) model.getValueAt(i, 1));
		}
		return requirements;
	}

	public void setEditGamePanel(NewGamePanel p) {
		parent = p;
	}

	public boolean validateForm() {
		boolean hasRequirement = false;

		// make sure at least one requirement is checked
		for (int i = 0; i < requirementsTable.getRowCount(); i++) {
			if ((Boolean) requirementsTable.getValueAt(i, 0)) {
				hasRequirement = true;
				break;
			}
		}

		countError.setVisible(!hasRequirement);
		return hasRequirement;
	}

	private NewGamePanel parent;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addButton;
	private javax.swing.JLabel countError;
	private javax.swing.JScrollPane requirementsTableScrollPane;
	protected javax.swing.JTable requirementsTable;
	private JButton btnSelectAll;
}
