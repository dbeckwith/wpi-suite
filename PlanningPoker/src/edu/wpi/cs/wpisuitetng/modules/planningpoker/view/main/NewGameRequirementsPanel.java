/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.wpi.cs.wpisuitetng.modules.planningpoker.view.main;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.GetRequirementsController;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.SimpleListObserver;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.GameRequirementModel;
import edu.wpi.cs.wpisuitetng.modules.planningpoker.model.RequirementsListModel;

/**
 * 
 * @author Lukas
 */
public class NewGameRequirementsPanel extends javax.swing.JPanel {

	/**
     * 
     */
	private static final long serialVersionUID = -4252474071295177531L;

	private final SimpleListObserver requirementsListObserver;
	private final ArrayList<GameRequirementModel> createdRequirements;
	// TODO: remember which requirements were checked off as added when the list updates
	
	/**
	 * Creates new form GameRequirements
	 */
	public NewGameRequirementsPanel() {
		initComponents();
		createdRequirements = new ArrayList<>();
		
		
		requirementsListObserver = new SimpleListObserver() {
            
            @Override
            public void listUpdated() {
                clearRequirements();
                for (GameRequirementModel req : RequirementsListModel.getInstance().getAll()) {
                    addRequirement(req);
                }
                for (GameRequirementModel req : createdRequirements) {
                    addRequirement(req);
                }
            }
        };
		RequirementsListModel.getInstance().addListListener(requirementsListObserver);
        GetRequirementsController.getInstance().retrieveRequirements();
	}
	
	public SimpleListObserver getRequirementsListObserver() {
	    return requirementsListObserver;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		requirementsTable = new javax.swing.JTable();
		addButton = new javax.swing.JButton();
		countError = new javax.swing.JLabel();

		clearRequirements();
		requirementsTable
				.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		requirementsTable.getTableHeader().setReorderingAllowed(false);

		addAllSelect = new SelectionTableHeadRenderer();
		addAllSelect.setText("Add");
		addAllSelect.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("action in header");
				setAllSelected(addAllSelect.isSelected());

			}
		});
		requirementsTable.getColumnModel().getColumn(0)
				.setHeaderRenderer(addAllSelect);
		requirementsTable.getTableHeader().addMouseListener(addAllSelect);

		jScrollPane1.setViewportView(requirementsTable);
		if (requirementsTable.getColumnModel().getColumnCount() > 0) {
			requirementsTable.getColumnModel().getColumn(0).setMinWidth(60);
			requirementsTable.getColumnModel().getColumn(0).setMaxWidth(60);
		}

		addButton.setText("Create Requirement");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				parent.showPanel("newreqpanel");
			}
		});

		countError.setForeground(new java.awt.Color(255, 0, 0));
		countError.setText("At least one requirement is needed!");

		final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(layout
				.createParallelGroup(Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(addButton).addGap(18)
								.addComponent(countError)
								.addContainerGap(135, Short.MAX_VALUE))
				.addComponent(jScrollPane1, Alignment.TRAILING,
						GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addComponent(jScrollPane1,
										GroupLayout.DEFAULT_SIZE, 255,
										Short.MAX_VALUE)
								.addGap(11)
								.addGroup(
										layout.createParallelGroup(
												Alignment.BASELINE)
												.addComponent(addButton)
												.addComponent(countError))
								.addContainerGap()));
		setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private TableModel getEmptyTableModel() {
	    return new javax.swing.table.DefaultTableModel(
                new Object[][] {

                }, new String[] { "Add", "Name", "Description", "Type" }) {
            /**
                     * 
                     */
            private static final long serialVersionUID = 3245971487236783965L;
            private Class[] types = new Class[] { java.lang.Boolean.class,
                    java.lang.Object.class, java.lang.String.class,
                    java.lang.String.class };
            private boolean[] canEdit = new boolean[] { true, false, false, false };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
    }

    private void setAllSelected(boolean select) {
		final DefaultTableModel model = (DefaultTableModel) requirementsTable
				.getModel();
		for (int i = 0; i < model.getRowCount(); i++) {
			model.setValueAt(select, i, 0);
		}
		requirementsTable.setModel(model);
	}
	
	private void clearRequirements() {
	    requirementsTable.setModel(getEmptyTableModel());
	    requirementsTable.getModel().addTableModelListener(
                new TableModelListener() {

                    @Override
                    public void tableChanged(TableModelEvent e) {
                        isValidForm();
                        parent.check();
                    }
                });
	}
	
	public void addCustomRequirement(GameRequirementModel r) {
	    createdRequirements.add(r);
	    addRequirement(r);
	}

	private void addRequirement(GameRequirementModel r) {
		System.out.println("added requirement " + r.toString());
		final DefaultTableModel model = (DefaultTableModel) requirementsTable
				.getModel();
		model.addRow(new Object[] { false, r, r.getDescription().toString(),
				r.getType().toString() });
		requirementsTable.setModel(model);
		isValidForm();
		parent.check();
	}

	public ArrayList<GameRequirementModel> getRequirementsFromTable() {
		final DefaultTableModel model = (DefaultTableModel) requirementsTable
				.getModel();
		final ArrayList<GameRequirementModel> requirements = new ArrayList<GameRequirementModel>();
		for (int i = 0; i < model.getRowCount(); i++) {
			if (!(Boolean) model.getValueAt(i, 0)) {
				continue;
			}
			requirements.add((GameRequirementModel) model.getValueAt(i, 1));
		}
		return requirements;
	}

	public void setEditGamePanel(NewGamePanel p) {
		parent = p;
	}

	public boolean isValidForm() {
		boolean hasRequirement = false;

		// make sure at least one requirement is checked
		for (int i = 0; i < requirementsTable.getRowCount(); i++) {
			if ((Boolean) requirementsTable.getValueAt(i, 0)) {
				hasRequirement = true;
				break;
			}
		}

		countError.setVisible(!hasRequirement);
		return hasRequirement;
	}

	private NewGamePanel parent;
	private SelectionTableHeadRenderer addAllSelect;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addButton;
	private javax.swing.JLabel countError;
	private javax.swing.JScrollPane jScrollPane1;
	protected javax.swing.JTable requirementsTable;

	// End of variables declaration//GEN-END:variables

	private class SelectionTableHeadRenderer extends JCheckBox implements
			TableCellRenderer, MouseListener {

		/**
         * 
         */
		private static final long serialVersionUID = 2375539707024199617L;

		@Override
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {
			return this;
		}

		@Override
		public void mouseClicked(MouseEvent e) {
			System.out.println(e);
			if (requirementsTable.getColumnModel().getColumnIndexAtX(e.getX()) == 0) {

				doClick();
				requirementsTable.getTableHeader().repaint();
			}
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub

		}

	}
}
