/*******************************************************************************
 * Copyright (c) 2013 -- WPI Suite
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Sam Carlberg
 ******************************************************************************/

package edu.wpi.cs.wpisuitetng.modules.planningpoker.view.main;

import edu.wpi.cs.wpisuitetng.modules.planningpoker.controller.UserPrefsController;

/**
 * A panel for changing user preferences. Right now it only includes
 * notification methods, but other functionality may be added in the future.
 * 
 * @author Sam Carlberg <slcarlberg@wpi.edu>
 */
public class UserPreferencesPanel extends javax.swing.JPanel {

	private static final UserPrefsController prefsController = 
			UserPrefsController.getInstance();

	private static UserPreferencesPanel instance;

	public static UserPreferencesPanel getPanel() {
		if (instance == null) {
			instance = new UserPreferencesPanel();
		}
		return instance;
	}

	/**
	 * Creates new form UserPreferencesPanel
	 */
	private UserPreferencesPanel() {
		initComponents();
		System.out.println("User=" + prefsController.getUser());
		if (prefsController.getUser() != null) {
			emailBox.setSelected(prefsController.getNotifyByEmail());
			imBox.setSelected(prefsController.getNotifyByIM());
		} else {
			System.err.println("Null user in UserPrefsController");
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		notificationsPanel = new javax.swing.JPanel();
		emailBox = new javax.swing.JCheckBox();
		imBox = new javax.swing.JCheckBox();

		notificationsPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(null, "Notifications",
						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
						javax.swing.border.TitledBorder.DEFAULT_POSITION, null,
						java.awt.Color.black));

		emailBox.setText("Recieve e-mail");
		emailBox.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				emailBoxActionPerformed(evt);
			}
		});

		imBox.setText("Receive IM");
		imBox.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				imBoxActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout notificationsPanelLayout = new javax.swing.GroupLayout(
				notificationsPanel);
		notificationsPanel.setLayout(notificationsPanelLayout);
		notificationsPanelLayout
				.setHorizontalGroup(notificationsPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								notificationsPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												notificationsPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(imBox)
														.addComponent(emailBox))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		notificationsPanelLayout
				.setVerticalGroup(notificationsPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								notificationsPanelLayout
										.createSequentialGroup()
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(imBox)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(emailBox)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(notificationsPanel,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(notificationsPanel,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void emailBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_emailBoxActionPerformed
		prefsController.setNotifyByEmail(emailBox.isSelected());
	}// GEN-LAST:event_emailBoxActionPerformed

	private void imBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_imBoxActionPerformed
		prefsController.setNotifyByIM(imBox.isSelected());
	}// GEN-LAST:event_imBoxActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox emailBox;
	private javax.swing.JCheckBox imBox;
	private javax.swing.JPanel notificationsPanel;
	// End of variables declaration//GEN-END:variables
}
